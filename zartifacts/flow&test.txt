Dev Plan
1. Setup Routing: Use react-router-dom to set up routing for different sections (About Me, Portfolio, Contact, Resume).
Implement route components for each section.

2. Navigation Component: Create a Navigation component with links to the different sections.
Highlight the active link based on the current route.

3. About Me Section: Create a component for the About Me section.
Display a recent photo or avatar of the developer and a short bio.

4. Portfolio Section: Create a component for the Portfolio section.
Display titled images of the developer’s applications with links to both the deployed applications and GitHub repositories.

5. Contact Section: Create a component for the Contact section.
Implement a contact form with fields for name, email address, and a message.
Add validation for required fields and email format.

6. Resume Section: Create a component for the Resume section.
Provide a link to a downloadable resume and list the developer’s proficiencies.

7. Footer Component: Create a Footer component.
Include text or icon links to the developer’s GitHub, LinkedIn, and a third platform (e.g., Stack Overflow, Twitter).

8. Styling: Implement styles for the header, navigation, sections, and footer.
Ensure a responsive and visually appealing design.

9. Testing: Test each section's functionality and appearance.
Ensure that navigation, form validation, and other features work as expected.



## Tests                 

TEST001: VERIFY APP.JS. At the CLI: npm start.  Verify that the App component renders without errors.
How to Test: Run the application (npm start) and check the console for any error messages. Ensure the application loads successfully.
STATUS: PASSED.

TEST002: HELLO WORLD: Verify that "HELLO WORLD" is displayed on the page. 
How to Test: Add HELLO WORLD to App.jsx. Run the application and check if HELLO WORLD is displayed on the page.
STATUS: PASSED. 

TEST003: HEADER COMPONENT (Header.jsx): Verify that the Header component renders HELLO WORLD. 
How to Test: Create /src/components/Header.jsx and import into App.jsx. Run the application and check if the name is displayed in the header.
STATUS: PASSED. 

TEST004: HEADER COMPONENT NAV Links: Verify that navigation links (About Me, Portfolio, Contact, Resume) are rendered.
How to Test: Add the navigation links in the Header.jsx component using list items and anchor tags. Check if all links are displayed in the header.
STATUS: PASSED

TEST005: HEADER COMPONENT STYLING. Verify that header component occupies the top 25% of the page and the h1 and links are displayed in white text against an attractive background. The links should be on same line as the H1 tag and the links should be displayed horizontally on the same line with space between them.
How to Test: update styling and verify.
STATUS: PASSED.

TEST006: MAIN & FOOTER COMPONENT CREATION. Verify that page DOM has a header, main and footer components. The header remains unchanged and is at the top of the page. The main is directly underneath the header and the footer is directly underneath the main.
How to Test: update components and run npm start to verify.
STATUS: PASSED.

TEST006: MAIN & FOOTER COMPONENT CREATION. Verify that page DOM has a header, main and footer components. The header remains unchanged and is at the top of the page. The main is directly underneath the header and the footer is directly underneath the main.
How to Test: update components and run npm start to verify.
STATUS: PASSED.

TEST007 COMPONENT STRUCTURE MODIFICATION AND VERIFICATION.  This test should meet these requirements:
	- You’ll use `vite` to build your portfolio, which will include the following:
		* A single `Header` component that appears on multiple pages
		* A single `Navigation` component within the header that will use `Link` components from `react-router-dom` to conditionally render the different sections of your portfolio
		* A single `Project` component that will be used multiple times in the Portfolio section
		* A single `Footer` component that appears on multiple pages
**Note**: Because this application doesn’t include a back end or connect to an API, the contact form doesn't need to save this information right now. You'll add back-end functionality in the next few weeks. In the meantime, consider including your email address and phone number on the Contact page.
STATUS: NOT RUN.


TEST004: FOOTER COMPONENT (Footer.js): Verify that the Footer component renders without errors.
How to Test: Add a simple message (e.g., "Copyright © 2023") to the Footer component. Run the application and check if the message is displayed at the bottom.
STATUS: NOT RUN.

TEST005: Page-Specific Components (AboutMe.js, Portfolio.js, Contact.js, Resume.js): Verify that each page component renders without errors.
How to Test: Temporarily add a unique message or content to each page component. Run the application and navigate to each page to ensure the content is displayed.
STATUS: NOT RUN.

TEST006: Project Component (Project.js): Verify that the Project component renders project details.
How to Test: Add temporary project details (e.g., project name, description) to the Project component. Run the application and check if the details are displayed.
STATUS: NOT RUN.

TEST007: Styling (CSS files): Verify that styling is applied correctly to each component.
How to Test: Experiment with styling changes in CSS files. Run the application and visually inspect each component to ensure the styling looks as expected.
STATUS: NOT RUN.

TEST008: Routing (if applicable): Verify that routing works as expected.
How to Test: If using react-router-dom, add temporary routes in routes.js or a similar file. Run the application and navigate between different sections to ensure the correct components are rendered.
STATUS: NOT RUN.




### Design Flow

```md
1. Run npm start or npm run dev:
	- Open your terminal and run the command to start the development server. This could be npm start or npm run dev, depending on your project configuration.
2. Vite Initialization:
	- Vite initializes the development environment, sets up the project, and starts the local development server.
3. Load index.html: The index.html file serves as the main HTML template for your React application. When you run the development server, it looks for this file to provide the basic structure of the web page.
	- The <div id="root"></div> serves as the mount point for your React components, and the <script> tag loads the main JavaScript file (main.jsx).
4. Vite looks for the entry point: main.jsx.
	- Vite looks for the entry point specified in your configuration (likely main.jsx or main.js). This file is the starting point of your React application.
5. Import React and ReactDOM:
The main.jsx file imports the necessary React and ReactDOM modules.
	- jsx code:
		import React from 'react'
		import ReactDOM from 'react-dom/client'
6. Import App Component and Global Styles:
	- The main.jsx file imports your main App component and any global styles.
	jsx code:
		import App from './App.jsx'
		import './index.css'
7. Render the App Component:

	- Using ReactDOM.createRoot, the App component is rendered into the HTML element with the ID of 'root'.
	jsx code:
	ReactDOM.createRoot(document.getElementById('root')).render(
  		<React.StrictMode>
    		<App />
  		</React.StrictMode>,
	)
	-React.StrictMode is used to enable strict mode, which helps catch common mistakes and potential 	problems in your application during development.
8. Initialize React Application:
	- React initializes the application, and the App component starts rendering.
9. App Component Structure:
	-The App component likely includes the overall structure of your application, such as the header, navigation, and footer.
10. Header, Navigation, and Footer Components:
	These components are likely present in the App component and are responsible for displaying the header, navigation links, and footer.
11. Routing (if applicable):
	- If you have set up routing (e.g., using react-router-dom), the appropriate page component is rendered based on the current route.
12. Page-Specific Components:
	- Components like AboutMe, Portfolio, Contact, and Resume are rendered based on the routing logic or the structure of your App component.
13. Project Component (if applicable):
	- If you have a common structure for displaying projects, the Project component is rendered for each project.
14. Styling Applied:
	- Styles from CSS files or styles-in-JS solutions are applied to the components, contributing to the visual appearance of the site.
15. Assets Loaded:
	- Images and other static assets from the assets folder are loaded and displayed as needed.
16. Development Server Interaction:
	- The development server interacts with the browser, automatically refreshing the page when changes are made in your code.
17. Browser Displays Rendered Site:
	- After the development server has processed your code, the browser displays the rendered site at the specified local URL (e.g., http://localhost:3000).

